<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<refentry id="pam_extrausers">

  <refmeta>
    <refentrytitle>pam_extrausers</refentrytitle>
    <manvolnum>8</manvolnum>
    <refmiscinfo class="sectdesc">Linux-PAM Manual</refmiscinfo>
  </refmeta>

  <refnamediv id="pam_extrausers-name">
    <refname>pam_extrausers</refname>
    <refpurpose>Module for libnss-extrausers authentication</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis id="pam_extrausers-cmdsynopsis">
      <command>pam_extrausers.so</command>
      <arg choice="opt">
        ...
      </arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1 id="pam_extrausers-description">

    <title>DESCRIPTION</title>

    <para>
      This is similar to the standard Unix authentication module pam_unix.
      But instead of using /etc/passwd and /etc/shadow, it uses
      /var/lib/extrausers/passwd and /var/lib/extrausers/shadow.
    </para>

    <para>
      The account component performs the task of establishing the status
      of the user's account and password based on the following
      <emphasis>shadow</emphasis> elements: expire, last_change, max_change,
      min_change, warn_change. In the case of the latter, it may offer advice
      to the user on changing their password or, through the
      <emphasis remap='B'>PAM_AUTHTOKEN_REQD</emphasis> return, delay
      giving service to the user until they have established a new password.
      The entries listed above are documented in the <citerefentry>
      <refentrytitle>shadow</refentrytitle><manvolnum>5</manvolnum>
      </citerefentry> manual page. Should the user's record not contain
      one or more of these entries, the corresponding
      <emphasis>shadow</emphasis> check is not performed.
    </para>

    <para>
      The authentication component performs the task of checking the
      users credentials (password). The default action of this module
      is to not permit the user access to a service if their official
      password is blank.
    </para>

    <para>
      The password component of this module performs the task of updating
      the user's password. The default encryption hash is taken from the
      <emphasis remap='B'>ENCRYPT_METHOD</emphasis> variable from
      <emphasis>/etc/login.defs</emphasis>
    </para>

    <para>
      The session component of this module logs when a user logins
      or leave the system.
    </para>

    <para>
      Remaining arguments, supported by others functions of this
      module, are silently ignored. Other arguments are logged as
      errors through <citerefentry>
      <refentrytitle>syslog</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsect1>

  <refsect1 id="pam_extrausers-options">

    <title>OPTIONS</title>
    <variablelist>
      <varlistentry>
        <term>
          <option>debug</option>
        </term>
        <listitem>
          <para>
	    Turns on debugging via
            <citerefentry>
              <refentrytitle>syslog</refentrytitle><manvolnum>3</manvolnum>
            </citerefentry>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>audit</option>
        </term>
        <listitem>
          <para>
            A little more extreme than debug.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>nullok</option>
        </term>
        <listitem>
          <para>
            The default action of this module is to not permit the
            user access to a service if their official password is blank.
            The <option>nullok</option> argument overrides this default
            and allows any user with a blank password to access the
            service.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>nullok_secure</option>
        </term>
        <listitem>
          <para>
            The default action of this module is to not permit the
            user access to a service if their official password is blank.
            The <option>nullok_secure</option> argument overrides this
            default and allows any user with a blank password to access
            the service as long as the value of PAM_TTY is set to one of
	    the values found in /etc/securetty.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>try_first_pass</option>
        </term>
        <listitem>
          <para>
            Before prompting the user for their password, the module first
            tries the previous stacked module's password in case that
            satisfies this module as well.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>use_first_pass</option>
        </term>
        <listitem>
          <para>
            The argument <option>use_first_pass</option> forces the module
            to use a previous stacked modules password and will never prompt
            the user - if no password is available or the password is not
            appropriate, the user will be denied access.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>nodelay</option>
        </term>
        <listitem>
          <para>
            This argument can be used to discourage the authentication
            component from requesting a delay should the authentication
            as a whole fail. The default action is for the module to
            request a delay-on-failure of the order of two second.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>use_authtok</option>
        </term>
        <listitem>
          <para>
            When password changing enforce the module to set the new
            password to the one provided by a previously stacked
            <option>password</option> module (this is used in the
            example of the stacking of the <command>pam_cracklib</command>
            module documented below).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>not_set_pass</option>
        </term>
        <listitem>
          <para>
            This argument is used to inform the module that it is not to
            pay attention to/make available the old or new passwords from/to
            other (stacked) password modules.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>nis</option>
        </term>
        <listitem>
          <para>
            NIS RPC is used for setting new passwords.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>remember=<replaceable>n</replaceable></option>
        </term>
        <listitem>
          <para>
            The last <replaceable>n</replaceable> passwords for each
            user are saved in <filename>/etc/security/opasswd</filename>
            in order to force password change history and keep the user
            from alternating between the same password too frequently.
            Instead of this option the <command>pam_pwhistory</command>
            module should be used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>shadow</option>
        </term>
        <listitem>
          <para>
            Try to maintain a shadow based system.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>md5</option>
        </term>
        <listitem>
          <para>
            When a user changes their password next, encrypt
            it with the MD5 algorithm.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>bigcrypt</option>
        </term>
        <listitem>
          <para>
            When a user changes their password next,
            encrypt it with the DEC C2 algorithm.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>sha256</option>
        </term>
        <listitem>
          <para>
            When a user changes their password next,
            encrypt it with the SHA256 algorithm. If the
            SHA256 algorithm is not known to the <citerefentry>
	    <refentrytitle>crypt</refentrytitle><manvolnum>3</manvolnum>
            </citerefentry> function,
            fall back to MD5.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>sha512</option>
        </term>
        <listitem>
          <para>
            When a user changes their password next,
            encrypt it with the SHA512 algorithm. If the
            SHA512 algorithm is not known to the <citerefentry>
	    <refentrytitle>crypt</refentrytitle><manvolnum>3</manvolnum>
            </citerefentry> function,
            fall back to MD5.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>blowfish</option>
        </term>
        <listitem>
          <para>
            When a user changes their password next,
            encrypt it with the blowfish algorithm. If the
            blowfish algorithm is not known to the <citerefentry>
	    <refentrytitle>crypt</refentrytitle><manvolnum>3</manvolnum>
            </citerefentry> function,
            fall back to MD5.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>rounds=<replaceable>n</replaceable></option>
        </term>
        <listitem>
          <para>
            Set the optional number of rounds of the SHA256, SHA512
            and blowfish password hashing algorithms to
            <replaceable>n</replaceable>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>broken_shadow</option>
        </term>
        <listitem>
          <para>
            Ignore errors reading shadow information for
            users in the account management module.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>minlen=<replaceable>n</replaceable></option>
        </term>
        <listitem>
          <para>
            Set a minimum password length of <replaceable>n</replaceable>
            characters.  The default value is 6.  The maximum for DES
            crypt-based passwords is 8 characters.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>obscure</option>
        </term>
        <listitem>
          <para>
            Enable some extra checks on password strength.  These checks
            are based on the "obscure" checks in the original shadow
            package.  The behavior is similar to the pam_cracklib
            module, but for non-dictionary-based checks.  The following
            checks are implemented:
            <variablelist>
              <varlistentry>
                <term>
                  <option>Palindrome</option>
                </term>
                <listitem>
                  <para>
                    Verifies that the new password is not a palindrome
                    of (i.e., the reverse of) the previous one.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>
                  <option>Case Change Only</option>
                </term>
                <listitem>
                  <para>
                    Verifies that the new password isn't the same as the
                    old one with a change of case.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>
                  <option>Similar</option>
                </term>
                <listitem>
                  <para>
                    Verifies that the new password isn't too much like
                    the previous one.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>
                  <option>Simple</option>
                </term>
                <listitem>
                  <para>
                    Is the new password too simple?  This is based on
                    the length of the password and the number of
                    different types of characters (alpha, numeric, etc.)
                    used.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>
                  <option>Rotated</option>
                </term>
                <listitem>
                  <para>
                    Is the new password a rotated version of the old
                    password?  (E.g., "billy" and "illyb")
                  </para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      Invalid arguments are logged with  <citerefentry>
      <refentrytitle>syslog</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsect1>

  <refsect1 id="pam_extrausers-types">
    <title>MODULE TYPES PROVIDED</title>
    <para>
      All module types (<option>account</option>, <option>auth</option>,
      <option>password</option> and <option>session</option>) are provided.
    </para>
  </refsect1>

  <refsect1 id='pam_extrausers-return_values'>
    <title>RETURN VALUES</title>
    <variablelist>
      <varlistentry>
        <term>PAM_IGNORE</term>
        <listitem>
          <para>
            Ignore this module.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
     </refsect1>

  <refsect1 id='pam_extrausers-examples'>
    <title>EXAMPLES</title>
    <para>
      An example usage for <filename>/etc/pam.d/common-password</filename>
      might be:
      <programlisting>
password        [success=2 default=ignore]      pam_extrausers.so obscure sha512
password        [success=1 default=ignore]      pam_unix.so obscure sha512
# here's the fallback if no module succeeds
password        requisite                       pam_deny.so
# prime the stack with a positive return value if there isn't one already;
# this avoids us returning an error just because nothing sets a success code
# since the modules above will each just jump around
password        required                        pam_permit.so
# and here are more per-package modules (the "Additional" block)
password        optional        pam_gnome_keyring.so 
password        optional        pam_ecryptfs.so 
      </programlisting>
    </para>
  </refsect1>

  <refsect1 id='pam_extrausers-see_also'>
    <title>SEE ALSO</title>
    <para>
      <citerefentry>
	<refentrytitle>login.defs</refentrytitle><manvolnum>5</manvolnum>
      </citerefentry>,
      <citerefentry>
	<refentrytitle>pam.conf</refentrytitle><manvolnum>5</manvolnum>
      </citerefentry>,
      <citerefentry>
	<refentrytitle>pam.d</refentrytitle><manvolnum>5</manvolnum>
      </citerefentry>,
      <citerefentry>
	<refentrytitle>pam</refentrytitle><manvolnum>7</manvolnum>
      </citerefentry>
    </para>
  </refsect1>

  <refsect1 id='pam_extrausers-author'>
    <title>AUTHOR</title>
      <para>
        pam_extrausers was written by various people.
      </para>
  </refsect1>

</refentry>
